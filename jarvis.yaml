# "use client"

# import { useState, useEffect, useRef } from "react"
# import { useNavigate, useLocation } from "react-router-dom"
# import {
#   Bot,
#   Microscope,
#   Atom,
#   Brain,
#   X,
#   Mic,
#   MicOff,
#   Dna,
#   Pill,
#   ChevronRight,
#   ChevronLeft,
#   CheckCircle,
#   HelpCircle,
#   ArrowLeft,
#   Home,
#   FlaskConical,
#   DollarSign,
#   FileText,
#   AlertTriangle,
#   FileBox,
#   Newspaper,
#   BrainCog,
# } from "lucide-react"
# import { useAuthStore } from "../../Store/auth.store.js"

# export default function Chatbot() {
#   const [isPanelOpen, setIsPanelOpen] = useState(false)
#   const [response, setResponse] = useState("")
#   const [isLoading, setIsLoading] = useState(false)
#   const [isSpeaking, setIsSpeaking] = useState(false)
#   const [isListening, setIsListening] = useState(false)
#   const [isRecognizing, setIsRecognizing] = useState(false)
#   const [transcript, setTranscript] = useState("")
#   const [conversationHistory, setConversationHistory] = useState([])
#   const [tooltipVisible, setTooltipVisible] = useState("")
#   const [mode, setMode] = useState(null) // null, "doubt", or "beginner"
#   const [subMode, setSubMode] = useState(null) // null, "waiting_for_selection", "waiting_for_tool_selection", "waiting_for_step_selection", "explaining_tab", "waiting_for_question", "resolving_doubt", "tour_complete", "process_ended"
#   const [targetRoute, setTargetRoute] = useState(null)
#   const [currentToolIndex, setCurrentToolIndex] = useState(0)
#   const [selectedOption, setSelectedOption] = useState(null) // "dashboard" or "drugDiscovery"
#   const [selectedTool, setSelectedTool] = useState(null) // Track manually selected tool or step
#   const [completedSteps, setCompletedSteps] = useState(
#     JSON.parse(localStorage.getItem("drugDiscoveryProgress") || "[]"),
#   ) // Persist progress
#   const recognitionRef = useRef(null)
#   const isCleaningUp = useRef(false)
#   const recognitionState = useRef("idle")
#   const conversationRef = useRef(null)
#   const lastProcessedRoute = useRef(null)
#   const recognitionLock = useRef(false)
#   const { user } = useAuthStore()
#   const navigate = useNavigate()
#   const location = useLocation()
#   const [isMinimized, setIsMinimized] = useState(false)

#   // Updated dashboard routes with detailed descriptions
#   const dashboardRoutes = [
#     // {
#     //   path: "/dashboard",
#     //   name: "Dashboard Home",
#     //   icon: "Home",
#     //   description: "Central hub for accessing all drug discovery tools and features",
#     //   details:
#     //     "Your main workspace where you can access all available tools, view project summaries, and navigate to different sections of the platform.",
#     // },
#     {
#       path: "/dashboard/newdrug-discovery",
#       name: "Discover New Drugs",
#       icon: "FlaskConical",
#       description: "AI-powered drug discovery and compound design",
#       details:
#         "Use advanced AI algorithms to discover new drug compounds, analyze molecular structures, and predict drug-target interactions for pharmaceutical research.",
#     },
#     {
#       path: "/dashboard/cost-estimation",
#       name: "Cost Estimation",
#       icon: "DollarSign",
#       description: "Calculate synthesis and production costs",
#       details:
#         "Estimate the financial costs of drug synthesis, manufacturing processes, and production scaling to help with budget planning and investment decisions.",
#     },
#     {
#       path: "/dashboard/protein-structure",
#       name: "Protein Structure Generation",
#       icon: "Dna",
#       description: "Generate and visualize 3D protein structures",
#       details:
#         "Create detailed 3D models of protein structures, analyze binding sites, and visualize molecular interactions for drug design and research purposes.",
#     },
#     {
#       path: "/dashboard/getalphafoldstrcture",
#       name: "Alphafold Structure",
#       icon: "Atom",
#       description: "Access AlphaFold protein structure predictions",
#       details:
#         "Leverage Google's AlphaFold database to access highly accurate protein structure predictions and use them for drug discovery and molecular analysis.",
#     },
#     {
#       path: "/dashboard/ai-naming",
#       name: "AI Naming Suggestion",
#       icon: "BrainCog",
#       description: "Generate creative and relevant drug names",
#       details:
#         "Use AI to generate pharmaceutical names that comply with naming conventions, are memorable, and reflect the drug's properties and therapeutic use.",
#     },
#     {
#       path: "/dashboard/ai-research-paper-generator",
#       name: "Research Paper Generation",
#       icon: "FileText",
#       description: "Generate research papers and documentation",
#       details:
#         "Automatically create research papers, scientific documentation, and reports based on your drug discovery data and experimental results.",
#     },
#     {
#       path: "/dashboard/sideeffect-prediction",
#       name: "Side Effects Prediction",
#       icon: "AlertTriangle",
#       description: "Predict potential drug side effects",
#       details:
#         "Analyze molecular structures and predict potential adverse effects and drug interactions to improve safety profiles during development.",
#     },
#     {
#       path: "/dashboard/voice-text-notes",
#       name: "Voice Notes",
#       icon: "Mic",
#       description: "Record and convert voice to text notes",
#       details:
#         "Record voice memos, convert speech to text, and organize your research notes and observations for easy documentation and sharing.",
#     },
#     {
#       path: "/dashboard/summary",
#       name: "Summary",
#       icon: "FileBox",
#       description: "Comprehensive project summaries and reports",
#       details:
#         "Generate detailed summaries of your drug discovery projects, including progress reports, key findings, and comprehensive analysis of results.",
#     },
#     {
#       path: "/dashboard/live-news",
#       name: "Live News",
#       icon: "Newspaper",
#       description: "Latest pharmaceutical and research news",
#       details:
#         "Stay updated with the latest news in pharmaceutical research, drug approvals, clinical trials, and industry developments from trusted sources.",
#     },
#   ]

#   const drugDiscoverySteps = [
#     {
#       path: "/dashboard/newdrug-discovery",
#       name: "Step 1: Drug Discovery",
#       description: "Discover and design new drug compounds using AI",
#       icon: "FlaskConical",
#       details:
#         "Begin your drug discovery journey by identifying potential drug targets, screening compound libraries, and using AI to predict promising molecular structures.",
#     },
#     {
#       path: "/dashboard/protein-structure",
#       name: "Step 2: Protein Structure Analysis",
#       description: "Generate and analyze target protein structures",
#       icon: "Dna",
#       details:
#         "Create detailed 3D models of your target proteins, analyze binding pockets, and understand molecular interactions crucial for drug binding.",
#     },
#     {
#       path: "/dashboard/cost-estimation",
#       name: "Step 3: Cost Analysis",
#       description: "Calculate synthesis and production costs",
#       icon: "DollarSign",
#       details:
#         "Estimate the financial requirements for synthesizing your compounds, scaling production, and bringing the drug to market.",
#     },
#     {
#       path: "/dashboard/ai-naming",
#       name: "Step 4: Drug Naming",
#       description: "Generate appropriate pharmaceutical names",
#       icon: "BrainCog",
#       details:
#         "Create compliant, memorable, and meaningful names for your drug compounds that reflect their therapeutic properties and target indications.",
#     },
#     {
#       path: "/dashboard/ai-research-paper-generator",
#       name: "Step 5: Documentation",
#       description: "Generate research papers and reports",
#       icon: "FileText",
#       details:
#         "Compile your research findings into professional scientific papers, regulatory documents, and comprehensive research reports.",
#     },
#     {
#       path: "/dashboard/summary",
#       name: "Step 6: Project Summary",
#       description: "Review and finalize your drug discovery project",
#       icon: "FileBox",
#       details:
#         "Generate a complete overview of your drug discovery project, including all findings, costs, timelines, and next steps for development.",
#     },
#   ]

#   // Enhanced suggested questions per tool/step
#   const suggestedQuestions = {
#     "/dashboard": [
#       "What tools are available on the platform?",
#       "How do I start a drug discovery project?",
#       "Can you explain the workflow?",
#     ],
#     "/dashboard/newdrug-discovery": [
#       "How does AI drug discovery work?",
#       "What types of compounds can I discover?",
#       "How do I input target information?",
#     ],
#     "/dashboard/protein-structure": [
#       "How do I visualize proteins in 3D?",
#       "What file formats are supported?",
#       "Can I analyze binding sites?",
#     ],
#     "/dashboard/getalphafoldstrcture": [
#       "What is AlphaFold and how accurate is it?",
#       "How do I search for specific proteins?",
#       "Can I download structure files?",
#     ],
#     "/dashboard/cost-estimation": [
#       "What factors are included in cost estimation?",
#       "How accurate are the predictions?",
#       "Can I customize cost parameters?",
#     ],
#     "/dashboard/ai-research-paper-generator": [
#       "Can I customize the paper format?",
#       "What data is required for generation?",
#       "How do I cite sources properly?",
#     ],
#     "/dashboard/sideeffect-prediction": [
#       "How does side effect prediction work?",
#       "What data is needed for analysis?",
#       "How reliable are the predictions?",
#     ],
#     "/dashboard/ai-naming": [
#       "How are drug names generated?",
#       "Can I filter names by criteria?",
#       "Are the names regulatory compliant?",
#     ],
#     "/dashboard/voice-text-notes": [
#       "How do I record voice notes?",
#       "Can I convert existing audio files?",
#       "How do I organize my notes?",
#     ],
#     "/dashboard/summary": [
#       "What is included in project summaries?",
#       "Can I export summaries to different formats?",
#       "How do I share reports with colleagues?",
#     ],
#     "/dashboard/live-news": [
#       "What news sources are included?",
#       "How often is the news updated?",
#       "Can I filter news by topics?",
#     ],
#   }

#   // Map icon names to components
#   const iconMap = {
#     Home: <Home className="h-4 w-4" />,
#     FlaskConical: <FlaskConical className="h-4 w-4" />,
#     DollarSign: <DollarSign className="h-4 w-4" />,
#     Dna: <Dna className="h-4 w-4" />,
#     Atom: <Atom className="h-4 w-4" />,
#     BrainCog: <BrainCog className="h-4 w-4" />,
#     FileText: <FileText className="h-4 w-4" />,
#     AlertTriangle: <AlertTriangle className="h-4 w-4" />,
#     Mic: <Mic className="h-4 w-4" />,
#     FileBox: <FileBox className="h-4 w-4" />,
#     Newspaper: <Newspaper className="h-4 w-4" />,
#     Brain: <Brain className="h-4 w-4" />,
#     Microscope: <Microscope className="h-4 w-4" />,
#     Bot: <Bot className="h-4 w-4" />,
#     Pill: <Pill className="h-4 w-4" />,
#   }

#   // Normalize path for route comparison
#   const normalizePath = (path) => {
#     if (!path || typeof path !== "string") {
#       console.warn(`Invalid path: ${path}, returning default '/dashboard'`)
#       return "/dashboard"
#     }
#     return path.replace(/\/+$/, "").toLowerCase()
#   }

#   // Initialize Web Speech API for recognition (doubt mode only)
#   const createRecognition = () => {
#     const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition
#     if (!SpeechRecognition) {
#       console.error("SpeechRecognition API not supported.")
#       return null
#     }
#     const recognition = new SpeechRecognition()
#     recognition.lang = "en-US"
#     recognition.interimResults = false
#     recognition.maxAlternatives = 1
#     recognition.continuous = true
#     return recognition
#   }

#   // Configure recognition handlers (doubt mode only)
#   const setupRecognition = (recognition) => {
#     recognition.onstart = () => {
#       console.log("Recognition started")
#       setIsRecognizing(true)
#       recognitionState.current = "active"
#     }

#     recognition.onresult = async (event) => {
#       const speechResult = event.results[event.results.length - 1][0].transcript.trim()
#       console.log(`Captured transcript: "${speechResult}"`)
#       setTranscript(speechResult)
#       setConversationHistory((prev) => [...prev, { type: "user", text: speechResult }])

#       if (speechResult.toLowerCase().includes("stop") || speechResult.toLowerCase().includes("thank you")) {
#         console.log("Stop command detected, stopping conversation")
#         await stopConversation()
#         return
#       }

#       await fetchResponse(speechResult)
#     }

#     recognition.onend = async () => {
#       console.log(`Recognition ended - isListening: ${isListening}, isSpeaking: ${isSpeaking}`)
#       setIsRecognizing(false)
#       recognitionState.current = "idle"
#       if (!isCleaningUp.current && !isSpeaking && isListening && mode === "doubt") {
#         console.log("Restarting recognition")
#         await startRecognition()
#       }
#     }

#     recognition.onerror = async (event) => {
#       console.error(`Speech recognition error: ${event.error}`)
#       setIsRecognizing(false)
#       recognitionState.current = "idle"
#       if (event.error === "no-speech" && !isCleaningUp.current && isListening && mode === "doubt") {
#         const message = "I didn't hear anything. Please try again."
#         setConversationHistory((prev) => [...prev, { type: "jarvis", text: message }])
#         await speakResponse(message)
#         await startRecognition()
#       } else {
#         recognitionRef.current = null
#         if (!isCleaningUp.current && isListening && mode === "doubt") {
#           await startRecognition()
#         }
#       }
#     }
#   }

#   // Start speech recognition (doubt mode only)
#   const startRecognition = async (retryCount = 0) => {
#     if (recognitionLock.current || isCleaningUp.current || isSpeaking) {
#       console.log("Recognition blocked")
#       if (isSpeaking && retryCount < 3) {
#         await new Promise((resolve) => setTimeout(resolve, 500))
#         await startRecognition(retryCount + 1)
#       }
#       return
#     }

#     recognitionLock.current = true

#     try {
#       if (recognitionRef.current && (isRecognizing || recognitionState.current === "active")) {
#         recognitionRef.current.stop()
#         await new Promise((resolve) => setTimeout(resolve, 200))
#       }

#       if (!recognitionRef.current) {
#         recognitionRef.current = createRecognition()
#         if (!recognitionRef.current) {
#           recognitionLock.current = false
#           const errorMessage = "Speech recognition is not supported on this device."
#           setConversationHistory((prev) => [...prev, { type: "jarvis", text: errorMessage }])
#           await speakResponse(errorMessage)
#           setIsListening(false)
#           return
#         }
#         setupRecognition(recognitionRef.current)
#       }

#       recognitionRef.current.start()
#       setIsListening(true)
#       setIsRecognizing(true)
#     } catch (error) {
#       console.error(`Error starting recognition: ${error}`)
#       setIsRecognizing(false)
#       recognitionState.current = "idle"

#       if (retryCount < 2) {
#         recognitionRef.current = null
#         await new Promise((resolve) => setTimeout(resolve, 200))
#         await startRecognition(retryCount + 1)
#       } else {
#         const message = "Sorry, I couldn't start speech recognition. Please try again."
#         setConversationHistory((prev) => [...prev, { type: "jarvis", text: message }])
#         await speakResponse(message)
#         setIsListening(false)
#       }
#     } finally {
#       recognitionLock.current = false
#     }
#   }

#   // Speak response using Web Speech API
#   const speakResponse = async (text) => {
#     return new Promise((resolve) => {
#       if (!text || typeof text !== "string") {
#         console.error("Invalid text for speech synthesis:", text)
#         setIsSpeaking(false)
#         resolve()
#         return
#       }

#       if (recognitionRef.current && isRecognizing) {
#         try {
#           recognitionRef.current.stop()
#           setIsRecognizing(false)
#           recognitionState.current = "idle"
#         } catch (error) {
#           console.error(`Error stopping recognition: ${error}`)
#         }
#       }

#       window.speechSynthesis.cancel()

#       const utterance = new SpeechSynthesisUtterance(text)
#       utterance.lang = "en-US"
#       utterance.rate = 0.9
#       utterance.onstart = () => {
#         setIsSpeaking(true)
#       }
#       utterance.onend = async () => {
#         setIsSpeaking(false)
#         if (mode === "doubt" && isListening && !isCleaningUp.current) {
#           await startRecognition()
#         }
#         resolve()
#       }
#       utterance.onerror = (event) => {
#         console.error(`Speech synthesis error: ${event.error}`)
#         setIsSpeaking(false)
#         resolve()
#       }
#       window.speechSynthesis.speak(utterance)
#     })
#   }

#   // Start conversation
#   const startConversation = async (selectedMode) => {
#     isCleaningUp.current = false
#     setIsPanelOpen(true)
#     setIsListening(false)
#     setIsRecognizing(false)
#     setTranscript("")
#     setResponse("")
#     setConversationHistory([])
#     setMode(selectedMode)
#     setSubMode(null)
#     setTargetRoute(null)
#     setCurrentToolIndex(0)
#     setSelectedTool(null)
#     setSelectedOption(null)
#     setCompletedSteps(JSON.parse(localStorage.getItem("drugDiscoveryProgress") || "[]"))

#     if (recognitionRef.current) {
#       try {
#         recognitionRef.current.stop()
#       } catch (error) {
#         console.error(`Error stopping recognition: ${error}`)
#       }
#       recognitionRef.current = null
#     }

#     let welcomeMessage = ""
#     if (selectedMode === "doubt") {
#       welcomeMessage =
#         "I am Jarvis, here to assist with your medical and pharmaceutical questions. Please speak your question."
#       setConversationHistory([{ type: "jarvis", text: welcomeMessage }])
#       await speakResponse(welcomeMessage)
#       setIsListening(true)
#       await startRecognition()
#     } else if (selectedMode === "beginner") {
#       welcomeMessage =
#         "Welcome to your drug discovery journey! I'm Jarvis, and I'll guide you through the dashboard tools or the drug discovery process. Please select an option."
#       setConversationHistory([{ type: "jarvis", text: welcomeMessage }])
#       await speakResponse(welcomeMessage)
#       setSubMode("waiting_for_selection")
#     }
#   }

#   // Stop conversation
#   const stopConversation = async () => {
#     // Stop listening and recognition first
#     setIsListening(false)
#     setIsRecognizing(false)

#     if (recognitionRef.current) {
#       try {
#         recognitionRef.current.stop()
#       } catch (error) {
#         console.error(`Error stopping recognition: ${error}`)
#       }
#       recognitionRef.current = null
#     }

#     // Add goodbye message to conversation history
#     const goodbyeMessage =
#       "Thank you for using Jarvis! It was a pleasure assisting you with your drug discovery journey. Have a great day!"
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: goodbyeMessage }])

#     // Speak the goodbye message and wait for it to complete
#     try {
#       await speakResponse(goodbyeMessage)
#     } catch (error) {
#       console.error("Error speaking goodbye message:", error)
#     }

#     // Only after speech is complete, start cleanup
#     isCleaningUp.current = true

#     // Cancel any remaining speech
#     window.speechSynthesis.cancel()

#     // Reset states
#     setMode(null)
#     setSubMode(null)
#     setTargetRoute(null)
#     setCurrentToolIndex(0)
#     setSelectedTool(null)
#     setSelectedOption(null)
#     setCompletedSteps([])
#     localStorage.setItem("drugDiscoveryProgress", JSON.stringify([]))

#     // Close the panel after everything is complete
#     setIsPanelOpen(false)
#     isCleaningUp.current = false
#   }

#   // Fetch response from Gemini API
#   const fetchResponse = async (query) => {
#     setIsLoading(true)
#     const contextInfo = selectedTool ? `Current tool context: ${selectedTool.name}. ` : ""
#     const problemStatement = `You are Jarvis, an AI assistant specialized in medical and pharmaceutical domains. ${contextInfo}Answer the user's query comprehensively and accurately. Keep your response concise but informative. Query: ${query}`

#     try {
#       const response = await fetch(
#         `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=AIzaSyDyujm50dHMYvn1V50dDDqcAhgUqCOuUGU`,
#         {
#           method: "POST",
#           headers: { "Content-Type": "application/json" },
#           body: JSON.stringify({
#             contents: [{ parts: [{ text: problemStatement }] }],
#           }),
#         },
#       )

#       if (!response.ok) {
#         throw new Error(`HTTP error! Status: ${response.status}`)
#       }

#       const data = await response.json()
#       const text = data.candidates[0].content.parts[0].text
#       setResponse(text)
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text }])
#       await speakResponse(text)

#       // Store the Q&A in local storage
#       const jarvisEntry = {
#         title: `Query: ${query.slice(0, 50)}`,
#         questions: query,
#         answers: text,
#         toolContext: selectedTool?.name || "General",
#         userId: user?._id || "66f172e9c7e124f5c4b3c2d1",
#         createdAt: new Date().toISOString(),
#       }
#       const storedEntries = JSON.parse(localStorage.getItem("jarvisEntries") || "[]")
#       storedEntries.push(jarvisEntry)
#       localStorage.setItem("jarvisEntries", JSON.stringify(storedEntries))

#       if (mode === "beginner" && (subMode === "resolving_doubt" || subMode === "waiting_for_question")) {
#         setSubMode("waiting_for_question")
#         const followUpPrompt = "Would you like to ask another question or select a different tool/step?"
#         setConversationHistory((prev) => [...prev, { type: "jarvis", text: followUpPrompt }])
#         await speakResponse(followUpPrompt)
#       }
#     } catch (error) {
#       console.error(`Error fetching Gemini API: ${error}`)
#       const errorMessage =
#         "Sorry, I encountered an error while processing your question. Would you like to try again or select another tool/step?"
#       setResponse(errorMessage)
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text: errorMessage }])
#       await speakResponse(errorMessage)

#       if (mode === "beginner") {
#         setSubMode("waiting_for_question")
#       }
#     } finally {
#       setIsLoading(false)
#     }
#   }

#   // Handle dashboard tools selection
#   const handleDashboardSelection = async () => {
#     setSelectedOption("dashboard")
#     setSubMode("waiting_for_tool_selection")
#     const prompt = "You chose to explore dashboard tools. Please select a tool to learn about."
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#   }

#   // Handle drug discovery selection
#   const handleDrugDiscoverySelection = async () => {
#     setSelectedOption("drugDiscovery")
#     setSubMode("waiting_for_step_selection")
#     const prompt = "You chose the drug discovery process. Please select the current step to begin."
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#   }

#   // Handle manual tool selection with delay
#   const handleToolSelection = async (tool) => {
#     setSelectedTool({ ...tool, icon: tool.icon })
#     const prompt = `You selected ${tool.name}. Now navigating to that page for more information.`
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#     await new Promise((resolve) => setTimeout(resolve, 1000)) // 1-second delay
#     navigate(tool.path, { replace: true, state: { fromJarvis: true } })
#     setTargetRoute(tool.path)
#     setSubMode("explaining_tab")
#     setCurrentToolIndex(dashboardRoutes.findIndex((t) => t.path === tool.path))
#     lastProcessedRoute.current = tool.path
#     await speakFieldsForRoute(tool.path)
#   }

#   // Handle manual step selection with delay
#   const handleStepSelection = async (step) => {
#     setSelectedTool({ ...step, icon: step.icon })
#     const prompt = `You selected ${step.name}. Now navigating to that page for more information.`
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#     await new Promise((resolve) => setTimeout(resolve, 1000)) // 1-second delay
#     navigate(step.path, { replace: true, state: { fromJarvis: true } })
#     setTargetRoute(step.path)
#     setSubMode("explaining_tab")
#     setCurrentToolIndex(drugDiscoverySteps.findIndex((s) => s.path === step.path))
#     setCompletedSteps((prev) => {
#       const newSteps = [...prev, step.path]
#       localStorage.setItem("drugDiscoveryProgress", JSON.stringify(newSteps))
#       return newSteps
#     })
#     await speakFieldsForRoute(step.path)
#   }

#   // Proceed to next step in the process
#   const proceedToNextStep = async () => {
#     setCompletedSteps((prev) => {
#       const newSteps = [...prev, drugDiscoverySteps[currentToolIndex].path]
#       localStorage.setItem("drugDiscoveryProgress", JSON.stringify(newSteps))
#       return newSteps
#     })
#     const completionPrompt = `Step ${currentToolIndex + 1} completed!`
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: completionPrompt }])
#     await speakResponse(completionPrompt)

#     if (currentToolIndex < drugDiscoverySteps.length - 1) {
#       const nextStep = drugDiscoverySteps[currentToolIndex + 1]
#       const prompt = `Moving to ${nextStep.name}.`
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#       await speakResponse(prompt)
#       await new Promise((resolve) => setTimeout(resolve, 1000)) // 1-second delay
#       navigate(nextStep.path, { replace: true, state: { fromJarvis: true } })
#       setTargetRoute(nextStep.path)
#       setSubMode("explaining_tab")
#       setCurrentToolIndex(currentToolIndex + 1)
#       lastProcessedRoute.current = nextStep.path
#       await speakFieldsForRoute(nextStep.path)
#     } else {
#       const prompt =
#         "You've reached the end of the drug discovery process. Click 'End Process' to complete or explore other options."
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#       await speakResponse(prompt)
#       setSubMode("tour_complete")
#     }
#   }

#   // End drug discovery process
#   const endProcess = async () => {
#     const congratsPrompt =
#       "Congratulations! You've successfully completed the drug discovery process! Would you like to restart the process or explore dashboard tools?"
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: congratsPrompt }])
#     await speakResponse(congratsPrompt)
#     setSubMode("process_ended")
#     setCurrentToolIndex(0)
#     setCompletedSteps([])
#     localStorage.setItem("drugDiscoveryProgress", JSON.stringify([]))
#   }

#   // Restart the current process
#   const restartProcess = async () => {
#     setCompletedSteps([])
#     localStorage.setItem("drugDiscoveryProgress", JSON.stringify([]))
#     const routes = selectedOption === "drugDiscovery" ? drugDiscoverySteps : dashboardRoutes
#     const prompt = `Starting over with ${routes[0].name}.`
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#     await new Promise((resolve) => setTimeout(resolve, 1000)) // 1-second delay
#     navigate(routes[0].path, { replace: true, state: { fromJarvis: true } })
#     setTargetRoute(routes[0].path)
#     setSubMode("explaining_tab")
#     setCurrentToolIndex(0)
#     lastProcessedRoute.current = routes[0].path
#     await speakFieldsForRoute(routes[0].path)
#   }

#   // Enhanced speak form fields and tab info based on route
#   const speakFieldsForRoute = async (route) => {
#     const normalizedRoute = normalizePath(route)
#     const foundRoute =
#       dashboardRoutes.find((r) => normalizePath(r.path) === normalizedRoute) ||
#       drugDiscoverySteps.find((s) => normalizePath(s.path) === normalizedRoute)

#     if (!foundRoute) {
#       const message = "It seems you're on an unrecognized page. Let's return to the dashboard home."
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text: message }])
#       await speakResponse(message)
#       navigate("/dashboard", { replace: true, state: { fromJarvis: true } })
#       lastProcessedRoute.current = "/dashboard"
#       return
#     }

#     const fullMessage = `Now at ${foundRoute.name}. ${foundRoute.details || foundRoute.description}`
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: fullMessage }])
#     await speakResponse(fullMessage)

#     if (mode === "beginner") {
#       setSubMode("waiting_for_question")
#       const questionPrompt =
#         "Do you have any questions about this tool? If not, you can select another step or proceed to the next step."
#       setConversationHistory((prev) => [...prev, { type: "jarvis", text: questionPrompt }])
#       await speakResponse(questionPrompt)
#     }
#   }

#   // Get route name for display
#   const getRouteName = (route) => {
#     const foundRoute =
#       dashboardRoutes.find((r) => normalizePath(r.path) === normalizePath(route)) ||
#       drugDiscoverySteps.find((s) => normalizePath(s.path) === normalizePath(route))
#     return foundRoute ? foundRoute.name : "Unknown"
#   }

#   // Scroll to bottom of conversation
#   useEffect(() => {
#     if (conversationRef.current) {
#       conversationRef.current.scrollTop = conversationRef.current.scrollHeight
#     }
#   }, [conversationHistory])

#   // Clean up on unmount
#   useEffect(() => {
#     return () => {
#       isCleaningUp.current = true
#       window.speechSynthesis.cancel()
#       if (recognitionRef.current) {
#         try {
#           recognitionRef.current.stop()
#         } catch (error) {
#           console.error(`Error stopping recognition: ${error}`)
#         }
#       }
#       recognitionRef.current = null
#     }
#   }, [])

#   // Save progress to localStorage when completedSteps changes
#   useEffect(() => {
#     localStorage.setItem("drugDiscoveryProgress", JSON.stringify(completedSteps))
#   }, [completedSteps])

#   const resetToInitialSelection = async () => {
#     const prompt = "Returning to the initial selection screen. How can I help you today?"
#     setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#     await speakResponse(prompt)
#     setMode(null)
#     setSubMode(null)
#     setSelectedOption(null)
#     setTargetRoute(null)
#     setSelectedTool(null)
#     setCurrentToolIndex(0)
#     setCompletedSteps([])
#     localStorage.setItem("drugDiscoveryProgress", JSON.stringify([]))
#   }

#   return (
#     <div className="font-sans">
#       {/* Trigger Button */}
#       <button
#         onClick={() => setIsPanelOpen(true)}
#         disabled={isPanelOpen}
#         onMouseEnter={() => setTooltipVisible("trigger")}
#         onMouseLeave={() => setTooltipVisible("")}
#         aria-label={isPanelOpen ? "Close Jarvis Assistant" : "Open Jarvis Assistant"}
#         className={`fixed bottom-6 right-6 h-16 w-16 rounded-full shadow-lg transition-all duration-200 transform hover:scale-105 flex items-center justify-center z-50 ${
#           isPanelOpen
#             ? "bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
#             : "bg-gradient-to-br from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
#         }`}
#       >
#         <Bot className="h-6 w-6 text-white" />
#       </button>
#       {tooltipVisible === "trigger" && (
#         <div className="fixed bottom-20 right-4 px-2 py-1 bg-gray-800 text-white text-xs rounded-lg shadow-sm z-50">
#           {isPanelOpen ? "Close Jarvis" : "Ask Jarvis"}
#         </div>
#       )}

#       {/* Pointing Message */}
#       {!isPanelOpen && (
#         <div className="fixed bottom-24 right-6 z-40">
#           <div
#             className="relative bg-white rounded-lg shadow-lg p-3 mb-2"
#             style={{ animation: "pulse-scale 2s infinite" }}
#           >
#             <div className="absolute right-4 bottom-2 transform translate-y-full w-3 h-3 bg-white rotate-45"></div>
#             <div className="flex items-center space-x-2">
#               <div className="bg-blue-500/20 p-1.5 rounded-full">
#                 <Bot className="h-4 w-4 text-blue-600" />
#               </div>
#               <div>
#                 <div className="text-sm font-semibold text-gray-800">Drug Discovery Assistant</div>
#                 <div className="text-xs text-gray-500">Click to interact with Jarvis</div>
#               </div>
#             </div>
#           </div>
#         </div>
#       )}

#       {/* Right Side Panel - Increased width from w-96 to w-[28rem] */}
#       {/* Increased overall panel height from h-[80vh] to h-[85vh] */}
#       {isPanelOpen && (
#         <div className="fixed top-12 right-4 h-[85vh] w-[28rem] bg-white shadow-2xl z-50 flex flex-col border border-gray-200 rounded-xl animate-in slide-in-from-right duration-300 backdrop-blur-sm bg-white/95">
#           <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-t-xl">
#             <div className="flex items-center space-x-2">
#               {mode && (
#                 <button
#                   onClick={resetToInitialSelection}
#                   aria-label="Back to initial selection"
#                   className="rounded-full h-8 w-8 bg-white/80 hover:bg-white text-gray-600 flex items-center justify-center shadow-sm transition-all duration-200"
#                 >
#                   <ArrowLeft className="h-4 w-4" />
#                 </button>
#               )}
#               <div className="bg-blue-100 p-1.5 rounded-full">
#                 <Dna className="h-5 w-5 text-blue-600" />
#               </div>
#               <h2 className="text-xl font-semibold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">
#                 Jarvis
#               </h2>
#             </div>
#             <div className="flex items-center space-x-2">
#               {/* <button
#                   onClick={() => setIsMinimized(!isMinimized)}
#                   aria-label={isMinimized ? "Maximize panel" : "Minimize panel"}
#                   className="rounded-full h-8 w-8 bg-white/80 hover:bg-white text-gray-600 flex items-center justify-center shadow-sm transition-all duration-200"
#                 >
#                   {isMinimized ? <ChevronRight className="h-4 w-4" /> : <ChevronLeft className="h-4 w-4" />}
#                 </button> */}
#               <button
#                 onClick={() => {
#                   const helpPrompt =
#                     "In beginner mode, you can type questions or follow guided steps. In doubt mode, use voice input to ask questions. Use the buttons to navigate or say 'stop' to end the conversation."
#                   setConversationHistory((prev) => [...prev, { type: "jarvis", text: helpPrompt }])
#                   speakResponse(helpPrompt)
#                 }}
#                 aria-label="Help"
#                 className="rounded-full h-8 w-8 bg-white/80 hover:bg-white text-gray-600 flex items-center justify-center shadow-sm transition-all duration-200"
#               >
#                 <HelpCircle className="h-4 w-4" />
#               </button>
#               <button
#                 onClick={stopConversation}
#                 aria-label="Close panel"
#                 className="rounded-full h-8 w-8 bg-white/80 hover:bg-white text-red-500 flex items-center justify-center shadow-sm transition-all duration-200"
#               >
#                 <X className="h-4 w-4" />
#               </button>
#             </div>
#           </div>

#           {!isMinimized && (
#             <div className="flex flex-col h-full overflow-hidden">
#               {!mode && (
#                 <div className="flex-1 p-4 flex flex-col items-center justify-center space-y-4 overflow-y-auto">
#                   <div className="text-center">
#                     <div className="bg-gradient-to-br from-blue-100 to-indigo-100 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
#                       <Bot className="h-8 w-8 text-blue-600" />
#                     </div>
#                     <h3 className="text-lg font-semibold text-gray-800 mb-2">Welcome to Jarvis</h3>
#                     <p className="text-sm text-gray-600">Choose an option to start your drug discovery journey.</p>
#                   </div>

#                   <div className="w-full space-y-3">
#                     <button
#                       onClick={() => startConversation("beginner")}
#                       className="w-full py-3 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 text-sm font-semibold shadow-lg transform hover:scale-105"
#                       aria-label="Start as a beginner"
#                     >
#                       <div className="flex items-center justify-center space-x-2">
#                         <Brain className="h-5 w-5" />
#                         <span>Beginner Guide</span>
#                       </div>
#                     </button>

#                     <button
#                       onClick={() => startConversation("doubt")}
#                       className="w-full py-3 px-4 bg-gradient-to-r from-green-600 to-emerald-600 text-white rounded-xl hover:from-green-700 hover:to-emerald-700 transition-all duration-200 text-sm font-semibold shadow-lg transform hover:scale-105"
#                       aria-label="Ask a question"
#                     >
#                       <div className="flex items-center justify-center space-x-2">
#                         <Mic className="h-5 w-5" />
#                         <span>Voice Questions</span>
#                       </div>
#                     </button>
#                   </div>

#                   <div className="w-full pt-4 border-t border-gray-200">
#                     <h4 className="text-xs font-medium text-gray-500 mb-2">Quick Actions</h4>
#                     <div className="grid grid-cols-2 gap-2">
#                       <button
#                         onClick={() => {
#                           const helpPrompt =
#                             "Here are some example questions you can ask: 'How do I analyze protein structures?', 'What is drug discovery?', 'Explain molecular docking'"
#                           setConversationHistory([{ type: "jarvis", text: helpPrompt }])
#                           speakResponse(helpPrompt)
#                           setMode("doubt")
#                         }}
#                         className="p-2 bg-gray-50 rounded-lg text-xs text-gray-600 hover:bg-gray-100 transition-all duration-200"
#                       >
#                         Examples
#                       </button>
#                       <button
#                         onClick={() => {
#                           const tutorialPrompt =
#                             "I'll guide you through our drug discovery tools step by step. Let's start!"
#                           setConversationHistory([{ type: "jarvis", text: tutorialPrompt }])
#                           speakResponse(tutorialPrompt)
#                           setMode("beginner")
#                           setSubMode("waiting_for_selection")
#                         }}
#                         className="p-2 bg-gray-50 rounded-lg text-xs text-gray-600 hover:bg-gray-100 transition-all duration-200"
#                       >
#                         Tutorial
#                       </button>
#                     </div>
#                   </div>
#                 </div>
#               )}

#               {mode && (
#                 <div className="flex flex-col h-full overflow-hidden">
#                   {/* Header with progress bar for drug discovery */}
#                   {mode === "beginner" &&
#                     selectedOption === "drugDiscovery" &&
#                     subMode !== "waiting_for_selection" &&
#                     subMode !== "waiting_for_step_selection" &&
#                     subMode !== "process_ended" && (
#                       <div className="p-3 bg-blue-50 border-b border-gray-200 flex-shrink-0">
#                         <div className="flex items-center justify-between mb-2">
#                           <h3 className="text-sm font-medium text-blue-600">Drug Discovery Process</h3>
#                           <div className="text-xs text-blue-600">
#                             Step {currentToolIndex + 1} of {drugDiscoverySteps.length}
#                           </div>
#                         </div>
#                         <div className="w-full bg-gray-200 border rounded-full h-2">
#                           <div
#                             className="bg-blue-600 h-2 rounded-full transition-all duration-300"
#                             style={{ width: `${((currentToolIndex + 1) / drugDiscoverySteps.length) * 100}%` }}
#                           ></div>
#                         </div>
#                         <div className="flex items-center space-x-2 overflow-x-auto pb-2 mt-2">
#                           {drugDiscoverySteps.map((step, index) => (
#                             <div
#                               key={index}
#                               className={`flex-shrink-0 flex items-center ${completedSteps.includes(step.path) ? "text-green-600" : index === currentToolIndex ? "text-blue-600" : "text-gray-400"}`}
#                             >
#                               <div
#                                 className={`h-6 w-6 rounded-full flex items-center justify-center text-xs ${completedSteps.includes(step.path) ? "bg-green-100 border border-green-300" : index === currentToolIndex ? "bg-blue-100 border border-blue-500" : "bg-gray-100"}`}
#                               >
#                                 {completedSteps.includes(step.path) ? <CheckCircle className="h-3 w-3" /> : index + 1}
#                               </div>
#                               {index < drugDiscoverySteps.length - 1 && <ChevronRight className="h-3 w-3 mx-1" />}
#                             </div>
#                           ))}
#                         </div>
#                       </div>
#                     )}

#                   {/* Current step details */}
#                   {mode === "beginner" &&
#                     selectedOption === "drugDiscovery" &&
#                     subMode !== "waiting_for_selection" &&
#                     subMode !== "waiting_for_step_selection" &&
#                     subMode !== "process_ended" && (
#                       <div className="p-3 bg-blue-50 border-b border-gray-200 flex-shrink-0">
#                         <div className="flex items-start space-x-3">
#                           <div className="bg-blue-100 p-2 rounded-full">
#                             {iconMap[drugDiscoverySteps[currentToolIndex]?.icon]}
#                           </div>
#                           <div className="min-w-0 flex-1">
#                             <h4 className="text-sm font-medium text-gray-800 truncate">
#                               {drugDiscoverySteps[currentToolIndex]?.name}
#                             </h4>
#                             <p className="text-xs text-gray-600 line-clamp-2">
#                               {drugDiscoverySteps[currentToolIndex]?.description}
#                             </p>
#                           </div>
#                         </div>
#                       </div>
#                     )}

#                   {/* Manual navigation buttons */}
#                   {mode === "beginner" &&
#                     selectedOption === "drugDiscovery" &&
#                     subMode !== "waiting_for_selection" &&
#                     subMode !== "waiting_for_step_selection" &&
#                     subMode !== "process_ended" && (
#                       <div className="flex justify-between p-3 bg-white border-b border-gray-200 flex-shrink-0">
#                         <button
#                           disabled={true} // Disable Previous button
#                           className="flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium text-gray-400 cursor-not-allowed"
#                           aria-label="Previous step (disabled)"
#                         >
#                           <ChevronLeft className="h-4 w-4" />
#                           <span>Previous</span>
#                         </button>
#                         {currentToolIndex === drugDiscoverySteps.length - 1 ? (
#                           <button
#                             onClick={endProcess}
#                             disabled={isSpeaking}
#                             className={`flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium ${isSpeaking ? "text-gray-400 cursor-not-allowed" : "text-blue-600 hover:bg-blue-50"}`}
#                             aria-label="End drug discovery process"
#                           >
#                             <span>End Process</span>
#                             <ChevronRight className="h-4 w-4" />
#                           </button>
#                         ) : (
#                           <button
#                             onClick={proceedToNextStep}
#                             disabled={isSpeaking}
#                             className={`flex items-center space-x-1 px-3 py-2 rounded-md text-sm font-medium ${isSpeaking ? "text-gray-400 cursor-not-allowed" : "text-blue-600 hover:bg-blue-50"}`}
#                             aria-label="Next step"
#                           >
#                             <span>Next</span>
#                             <ChevronRight className="h-4 w-4" />
#                           </button>
#                         )}
#                       </div>
#                     )}

#                   {/* Manual selection for beginner mode */}
#                   {mode === "beginner" && subMode === "waiting_for_selection" && (
#                     <div className="p-4 flex-shrink-0 overflow-y-auto">
#                       <h3 className="text-sm font-medium text-gray-800 mb-3">Select an option to continue:</h3>
#                       <div className="grid grid-cols-1 gap-3">
#                         <button
#                           onClick={() => handleDashboardSelection()}
#                           className="flex items-center space-x-3 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                           aria-label="Explore dashboard tools"
#                         >
#                           <div className="bg-blue-100 p-2 rounded-full">{iconMap["Home"]}</div>
#                           <div className="text-left min-w-0 flex-1">
#                             <div className="text-sm font-medium text-gray-800">Dashboard Tools</div>
#                             <div className="text-xs text-gray-500">Explore all available tools and features</div>
#                           </div>
#                         </button>
#                         <button
#                           onClick={() => handleDrugDiscoverySelection()}
#                           className="flex items-center space-x-3 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                         >
#                           <div className="bg-blue-100 p-2 rounded-full">{iconMap["FlaskConical"]}</div>
#                           <div className="text-left min-w-0 flex-1">
#                             <div className="text-sm font-medium text-gray-800">Drug Discovery Process</div>
#                             <div className="text-xs text-gray-500">Guided step-by-step drug development journey</div>
#                           </div>
#                         </button>
#                       </div>
#                       <div className="flex justify-between gap-2 mt-4">
#                         <button
#                           onClick={() => {
#                             stopConversation()
#                             setIsPanelOpen(false)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-red-600 hover:bg-red-700 transition-all duration-200"
#                           aria-label="End conversation"
#                         >
#                           End Conversation
#                         </button>
#                       </div>
#                     </div>
#                   )}

#                   {/* Tool selection for dashboard */}
#                   {mode === "beginner" && subMode === "waiting_for_tool_selection" && (
#                     <div className="p-5 bg-blue-50 border-b border-gray-200 flex-shrink-0 overflow-y-auto max-h-56">
#                       <h3 className="text-sm font-medium text-gray-800 mb-4">Select a tool to explore:</h3>
#                       <div className="grid grid-cols-1 gap-3 max-h-36 overflow-y-auto pb-2">
#                         {dashboardRoutes.map((tool, index) => (
#                           <button
#                             key={index}
#                             onClick={() => handleToolSelection(tool)}
#                             className="flex items-center space-x-4 p-4 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                             aria-label={`Select ${tool.name} tool`}
#                             title={tool.description}
#                           >
#                             <div className="bg-blue-100 p-1.5 rounded-full">{iconMap[tool.icon]}</div>
#                             <div className="text-left min-w-0 flex-1">
#                               <div className="text-sm font-medium truncate">{tool.name}</div>
#                               <div className="text-xs text-gray-500 line-clamp-1">{tool.description}</div>
#                             </div>
#                           </button>
#                         ))}
#                       </div>
#                       <div className="flex justify-between gap-2 mt-3">
#                         <button
#                           onClick={async () => {
#                             const prompt = "Returning to option selection."
#                             setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#                             await speakResponse(prompt)
#                             setSubMode("waiting_for_selection")
#                             setSelectedOption(null)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all duration-200"
#                           aria-label="Go back to option selection"
#                           title="Go back to option selection"
#                         >
#                           Back
#                         </button>
#                         <button
#                           onClick={() => {
#                             stopConversation()
#                             setIsPanelOpen(false)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-red-600 hover:bg-red-700 transition-all duration-200"
#                           aria-label="End conversation for tool selection"
#                         >
#                           End Conversation
#                         </button>
#                       </div>
#                     </div>
#                   )}

#                   {/* Step selection for drug discovery */}
#                   {mode === "beginner" && subMode === "waiting_for_step_selection" && (
#                     <div className="p-5 bg-blue-50 border-b border-gray-200 flex-shrink-0 overflow-y-auto max-h-80">
#                       <h3 className="text-sm font-medium text-gray-800 mb-4">Select a step to explore:</h3>
#                       <div className="grid grid-cols-1 gap-3">
#                         {drugDiscoverySteps.map((step, index) => (
#                           <button
#                             key={index}
#                             onClick={() => handleStepSelection(step)}
#                             disabled={index !== currentToolIndex || completedSteps.includes(step.path)}
#                             className={`flex items-center space-x-4 p-4 bg-white rounded-lg border border-gray-200 transition-all duration-200 ${index !== currentToolIndex || completedSteps.includes(step.path) ? "opacity-50 cursor-not-allowed" : "hover:border-blue-300 hover:bg-blue-50"}`}
#                             aria-label={`${index !== currentToolIndex || completedSteps.includes(step.path) ? `${step.name} (locked)` : `Select ${step.name}`}`}
#                             title={step.description}
#                           >
#                             <div className="bg-blue-100 p-1.5 rounded-full">
#                               {completedSteps.includes(step.path) ? (
#                                 <CheckCircle className="h-4 w-4 text-green-600" />
#                               ) : (
#                                 iconMap[step.icon]
#                               )}
#                             </div>
#                             <div className="text-left min-w-0 flex-1">
#                               <div className="text-sm font-medium truncate">{step.name}</div>
#                               <div className="text-xs text-gray-500 line-clamp-2">{step.description}</div>
#                             </div>
#                           </button>
#                         ))}
#                       </div>
#                       <div className="flex justify-between gap-2 mt-4">
#                         <button
#                           onClick={async () => {
#                             const prompt = "Returning to option selection."
#                             setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#                             await speakResponse(prompt)
#                             setSubMode("waiting_for_selection")
#                             setSelectedOption(null)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all duration-200"
#                           aria-label="Go back to option selection"
#                           title="Go back to option selection"
#                         >
#                           Back
#                         </button>
#                         <button
#                           onClick={() => {
#                             stopConversation()
#                             setIsPanelOpen(false)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-red-600 hover:bg-red-700 transition-all duration-200"
#                           aria-label="End conversation for step selection"
#                         >
#                           End Conversation
#                         </button>
#                       </div>
#                     </div>
#                   )}

#                   {/* Process ended options */}
#                   {mode === "beginner" && subMode === "process_ended" && (
#                     <div className="p-4 bg-blue-50 border-b border-gray-200 flex-shrink-0 overflow-y-auto">
#                       <h3 className="text-sm font-medium text-gray-800 mb-3">Drug Discovery Completed!</h3>
#                       <div className="grid grid-cols-1 gap-3">
#                         <button
#                           onClick={() => restartProcess()}
#                           className="flex items-center space-x-3 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                           aria-label="Restart drug discovery process"
#                         >
#                           <div className="bg-blue-100 p-2 rounded-full">{iconMap["FlaskConical"]}</div>
#                           <div className="text-left min-w-0 flex-1">
#                             <div className="text-sm font-medium text-gray-800">Restart Drug Discovery</div>
#                             <div className="text-xs text-gray-500">Start the process again from the beginning</div>
#                           </div>
#                         </button>
#                         <button
#                           onClick={() => handleDashboardSelection()}
#                           className="flex items-center space-x-3 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                           aria-label="Explore dashboard tools"
#                         >
#                           <div className="bg-blue-100 p-2 rounded-full">{iconMap["Home"]}</div>
#                           <div className="text-left min-w-0 flex-1">
#                             <div className="text-sm font-medium text-gray-800">Explore Dashboard Tools</div>
#                             <div className="text-xs text-gray-500">Try other available tools and features</div>
#                           </div>
#                         </button>
#                         <button
#                           onClick={() => {
#                             setSubMode("waiting_for_selection")
#                             const prompt = "Returning to option selection."
#                             setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#                             speakResponse(prompt)
#                           }}
#                           className="flex items-center space-x-3 p-3 bg-white rounded-lg border border-gray-200 hover:border-blue-300 hover:bg-blue-50 transition-all duration-200"
#                           aria-label="Return to option selection"
#                         >
#                           <div className="bg-blue-100 p-2 rounded-full">{iconMap["Bot"]}</div>
#                           <div className="text-left min-w-0 flex-1">
#                             <div className="text-sm font-medium text-gray-800">Back to Options</div>
#                             <div className="text-xs text-gray-500">Choose between dashboard or drug discovery</div>
#                           </div>
#                         </button>
#                       </div>
#                       <div className="flex justify-between gap-2 mt-4">
#                         <button
#                           onClick={() => {
#                             stopConversation()
#                             setIsPanelOpen(false)
#                           }}
#                           className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-red-600 hover:bg-red-700 transition-all duration-200"
#                           aria-label="End conversation for step selection"
#                         >
#                           End Conversation
#                         </button>
#                       </div>
#                     </div>
#                   )}

#                   {/* Conversation History */}
#                   {/* Increased max height and added more space */}
#                   <div
#                     ref={conversationRef}
#                     className="flex-1 overflow-y-auto p-4 space-y-4 min-h-[200px] max-h-[50vh]"
#                   >
#                     {conversationHistory.map((msg, index) => (
#                       <div key={index} className={`flex ${msg.type === "user" ? "justify-end" : "justify-start"}`}>
#                         {/* Increased message bubble padding and spacing */}
#                         <div
#                           className={`max-w-[85%] ${msg.type === "user" ? "bg-blue-600 text-white rounded-tr-none" : "bg-white text-gray-800 rounded-tl-none border border-gray-200 shadow-sm"} rounded-2xl px-4 py-4 mb-2 transition-all duration-200`}
#                         >
#                           {msg.type === "jarvis" && (
#                             <div className="flex items-center space-x-2 mb-1 pb-1 border-b border-gray-200">
#                               <Bot className="h-3 w-3 text-blue-600" />
#                               <span className="text-xs font-medium text-blue-600">JARVIS</span>
#                             </div>
#                           )}
#                           <p className="text-sm whitespace-pre-wrap break-words">{msg.text}</p>
#                         </div>
#                       </div>
#                     ))}
#                     {(isLoading || isSpeaking) && (
#                       <div className="flex justify-start">
#                         <div className="max-w-[85%] w-full py-2 px-3 bg-white border rounded-2xl border-gray-200 shadow-sm">
#                           <div className="flex items-center space-x-2 pb-0">
#                             <Bot className="h-3 w-3 text-blue-600" />
#                             <span className="text-xs font-semibold text-blue-600">JARVIS</span>
#                           </div>
#                           <div className="flex space-x-1 items-center">
#                             <div className="h-3 w-1 bg-blue-400 animate-wave"></div>
#                             <div className="h-4 w-1 bg-blue-400 animate-wave" style={{ animationDelay: "100ms" }}></div>
#                             <div className="h-5 w-1 bg-blue-400 animate-wave" style={{ animationDelay: "200ms" }}></div>
#                             <div className="h-4 w-1 bg-blue-400 animate-wave" style={{ animationDelay: "300ms" }}></div>
#                             <div className="h-3 w-1 bg-blue-400 animate-wave" style={{ animationDelay: "400ms" }}></div>
#                           </div>
#                         </div>
#                       </div>
#                     )}
#                   </div>

#                   {mode && (
#                     // Added more space between the conversation area and status bar
#                     <div className="px-4 py-3 mt-2 bg-gray-50 border-t border-gray-200 flex-shrink-0">
#                       <div className="flex items-center justify-between text-xs text-gray-500">
#                         <div className="flex items-center space-x-2">
#                           <div
#                             className={`w-2 h-2 rounded-full ${isListening ? "bg-green-400 animate-pulse" : isSpeaking ? "bg-blue-400 animate-pulse" : "bg-gray-300"}`}
#                           ></div>
#                           <span>{isListening ? "Listening" : isSpeaking ? "Speaking" : "Ready"}</span>
#                         </div>
#                         <div className="flex items-center space-x-1">
#                           <span>{conversationHistory.length} messages</span>
#                         </div>
#                       </div>
#                     </div>
#                   )}

#                   {/* Input Area */}
#                   {/* Input Area */}
#                   <div className="p-4 border-t border-gray-200 flex-shrink-0">
#                     {mode === "doubt" && (
#                       <div className="flex items-center justify-between px-4 py-2 rounded-full bg-white border border-gray-200 shadow-sm">
#                         <div className="flex items-center space-x-2 text-sm text-gray-600">
#                           {isListening && mode === "doubt" ? (
#                             <>
#                               <div className="relative">
#                                 <div className="absolute inset-0 bg-green-100 rounded-full animate-ping"></div>
#                                 <Mic className="h-5 w-5 text-green-600" />
#                               </div>
#                               <span className="text-sm">Listening...</span>
#                             </>
#                           ) : (
#                             <>
#                               <MicOff className="h-5 w-5 text-red-600" />
#                               <span className="text-sm">Voice recognition paused</span>
#                             </>
#                           )}
#                         </div>
#                         <button
#                           onClick={() => (isListening ? stopConversation() : startConversation("doubt"))}
#                           className={`flex items-center px-4 py-2 rounded-lg text-sm font-semibold text-white ${
#                             isListening ? "bg-red-600 hover:bg-red-700" : "bg-blue-600 hover:bg-blue-700"
#                           } transition-all duration-200`}
#                           aria-label="Start or stop voice conversation"
#                         >
#                           {isListening ? "Stop" : "Start"}
#                         </button>
#                       </div>
#                     )}
#                     {mode === "beginner" && subMode === "waiting_for_question" && (
#                       <div className="flex flex-col space-y-3">
#                         <input
#                           type="text"
#                           placeholder="Ask a question about this tool..."
#                           className="w-full px-4 py-2 rounded-lg border border-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
#                           onKeyDown={async (e) => {
#                             if (e.key === "Enter" && e.target.value.trim()) {
#                               setSubMode("resolving_doubt")
#                               const query = e.target.value.trim()
#                               setConversationHistory((prev) => [...prev, { type: "user", text: query }])
#                               await fetchResponse(query)
#                               e.target.value = ""
#                             }
#                           }}
#                           aria-label="Ask a question about this tool"
#                         />
#                         {suggestedQuestions[targetRoute]?.length && (
#                           <div className="flex flex-wrap gap-2">
#                             {suggestedQuestions[targetRoute].map((q, index) => (
#                               <button
#                                 key={index}
#                                 onClick={() => {
#                                   setSubMode("resolving_doubt")
#                                   setConversationHistory((prev) => [...prev, { type: "user", text: q }])
#                                   fetchResponse(q)
#                                 }}
#                                 className="px-3 py-1 bg-blue-100 text-blue-600 rounded-full text-xs hover:bg-blue-200 transition-all duration-200"
#                                 aria-label={`Ask suggested question: ${q}`}
#                                 title={`Ask suggested question: ${q}`}
#                               >
#                                 {q}
#                               </button>
#                             ))}
#                           </div>
#                         )}
#                         <div className="flex justify-end gap-2">
#                           {selectedOption === "drugDiscovery" && (
#                             <button
#                               onClick={() => proceedToNextStep()}
#                               disabled={isSpeaking}
#                               className="flex-1 px-4 py-2 rounded-lg bg-blue-600 text-sm font-semibold text-white hover:bg-blue-700 transition-all duration-200"
#                               aria-label="Proceed to next step in drug discovery"
#                             >
#                               Next Step
#                             </button>
#                           )}
#                           <button
#                             onClick={async () => {
#                               const prompt = `Returning to ${selectedOption === "drugDiscovery" ? "step" : "tool"} selection.`
#                               setConversationHistory((prev) => [...prev, { type: "jarvis", text: prompt }])
#                               await speakResponse(prompt)
#                               setSubMode(
#                                 selectedOption === "drugDiscovery"
#                                   ? "waiting_for_step_selection"
#                                   : "waiting_for_tool_selection",
#                               )
#                             }}
#                             disabled={isSpeaking}
#                             className="flex-1 px-4 py-2 rounded-lg text-sm font-semibold text-white bg-blue-600 hover:bg-blue-700 transition-all duration-200"
#                             aria-label={`Select another ${selectedOption === "drugDiscovery" ? "step" : "tool"}`}
#                           >
#                             Select Another {selectedOption === "drugDiscovery" ? "Step" : "Tool"}
#                           </button>
#                         </div>
#                       </div>
#                     )}

#                     {/* Help text - now properly positioned and more visible */}
#                     <div className="mt-2 py-2 px-4 bg-blue-50/50 rounded-lg border-t border-gray-100">
#                       <div className="text-xs text-center text-gray-600 leading-relaxed">
#                         Jarvis can assist with molecular structures, drug discovery processes, and medical queries.
#                       </div>
#                     </div>
#                   </div>
#                   <style jsx>{`
#                       @keyframes pulse-scale {
#                         0%, 100% {
#                           transform: scale(1);
#                         }
#                         50% {
#                           transform: scale(1.05);
#                         }
#                       }
#                       @keyframes wave {
#                         0%, 100% {
#                           transform: translateY(0);
#                         }
#                         50% {
#                           transform: translateY(-4px);
#                         }
#                       }

#                       .animate-wave {
#                         animation: wave 0.8s infinite;
#                       }

#                       .animate-wave:nth-child(2) {
#                         animation-delay: 100ms;
#                       }

#                       .animate-wave:nth-child(3) {
#                         animation-delay: 200ms;
#                       }

#                       .animate-wave:nth-child(4) {
#                         animation-delay: 300ms;
#                       }

#                       .animate-wave:nth-child(5) {
#                         animation-delay: 400ms;
#                       }

#                       @keyframes ping {
#                         75%, 100% {
#                           transform: scale(2);
#                           opacity: 0;
#                         }
#                       }
#                       .animate-ping {
#                         animation: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite;
#                       }

#                       .line-clamp-1 {
#                         overflow: hidden;
#                         display: -webkit-box;
#                         -webkit-line-clamp: 1;
#                         -webkit-box-orient: vertical;
#                       }

#                       .line-clamp-2 {
#                         overflow: hidden;
#                         display: -webkit-box;
#                         -webkit-line-clamp: 2;
#                         -webkit-box-orient: vertical;
#                       }
#                     `}</style>
#                 </div>
#               )}
#             </div>
#           )}
#         </div>
#       )}
#     </div>
#   )
# }
